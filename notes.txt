- npx create-react-app é o comando para criar um projeto React Native.
- npx create-react-app my-app -t é o comando para criar um projeto React Native com o template especificado.
- npx create-react-app --help é o comando para ver as opções de ajuda do create-react-app.
- npm start --tunnel é o comando para iniciar o servidor de desenvolvimento do React Native com um túnel. Na primeira
vez que executar o comando ele vai solicitar a install do NGRoK, que é uma ferramenta para criar túneis para acessar o
servidor de desenvolvimento de qualquer lugar.
- Expo Go é o framework mais popular para desenvolvimento de aplicativos React Native.

- Expo é diferente de Expo Go, pois Expo é um framework para desenvolvimento de aplicativos React Native, enquanto Expo
Go é um aplicativo que permite visualizar aplicativos React Native em desenvolvimento no seu dispositivo móvel.

- Diferentemente da Web, tudo em React Native está encapsulado em componentes, que são blocos de construção do
aplicativo.

- Um React Native Index consiste de duas partes principais: o código JavaScript e o código nativo do Index.

- View é o componente mais básico do React Native, pode ser comparado ao div do HTML, é usado para criar contêineres
e layouts.

- Todos os layouts em React usam o Flexbox, com algumas diferenças:
    - all elements have display: flex by default
    - flexDirection defaults to to column (instead of row)
    - alignContent defaults to flex-start (instead of stretch)
    - flexShrink defaults to 0 (instead of 1)
    - the flex parameter only supports a single number

- Text é o componente usado para exibir texto no React Native, pode ser comparado ao p do HTML. A única diferença é que
todos os textos precisam estar dentro de um componente Text, não é possível exibir texto fora de um componente Text.

- A medida padrão em React Native, não é pixel e sim display points, que é uma unidade de medida relativa ao tamanho do
dispositivo. Isso significa que o tamanho dos elementos será proporcional ao tamanho da tela do dispositivo, e não fixo
em pixels. Isso é importante para garantir que o layout do aplicativo seja responsivo e se adapte a diferentes tamanhos
de tela.

- O pixel ratio é a proporção entre os pixels físicos e os pixels lógicos na tela do dispositivo. Em dispositivos com
alta densidade de pixels, como smartphones e tablets, o pixel ratio é maior que 1, o que significa que há mais pixels
físicos do que pixels lógicos. Isso permite que os elementos do aplicativo sejam exibidos com mais detalhes e clareza,
mesmo em telas menores. Em dispositivos com baixa densidade de pixels, o pixel ratio é menor que 1, o que significa que
há menos pixels físicos do que pixels lógicos. Isso pode resultar em elementos do aplicativo sendo exibidos com menos
detalhes e clareza, especialmente em telas maiores. O React Native usa o pixel ratio para ajustar automaticamente o
tamanho dos elementos do aplicativo, garantindo que eles sejam exibidos corretamente em diferentes tamanhos de tela e
densidades de pixels.

- Não é possível um estilo global para todos os arquivos em React Native, pois cada componente tem seu próprio escopo de
estilo. No entanto, é possível criar um arquivo de estilos compartilhados e importá-lo em cada componente que precisar
usar esses estilos. Isso permite que você reutilize estilos comuns em vários componentes, mas ainda assim mantém o
escopo de estilo separado para cada componente. Além disso, é possível usar bibliotecas de estilos como Styled
Components ou Emotion para criar estilos globais que podem ser aplicados a vários componentes.

- O mais comum para estilos em React Native é que cada página tenha suas próprias definições de estilo, que ficam no
final de cada arquivo.

- Para iniciar a transmissão use "npx expo start --tunnel".

- Existe uma tag Button no React Native, mas ela não é tão utilizada pois o elemento gerado não permite personalizações.

- Para criar um botão é através dos elementos, TouchableOpacity, Pressable.

- O item de Alerta aceita alguns parâmetros, como titulo, a mensagem, os botões. Porém, por usar uma mensagem nativa dos
sistemas, ela sempre terá um estilo diferente dependendo do sistema operacional.

- Se você precisa personalizar o alerta, você deve criar um Custom Dialog, que na realidade o que será construído é um
modal em full screen.

- SVG's são itens que precisam ser usados com cuidado em React Native, pois o uso exagerado pode causar lentidão e até
mesmo interromper a utilização.

- A razão para instalar via npx e não npm ou yarn, é que as versões do React são atualizadas da mesma forma que as
atualizações do Expo, o npx faz um check prévio como: "Installing 1 SDK 53.0.0 compatible native module using npm", para
se certificar que a versão da biblioteca instalada é compatível com as versões do Expo e do React Native que estiver
utilizando.

- Layouts em React Native é composto basicamente de um Stack, onde a próxima tela virá por cima da última.

- A idéia com o arquivo de rotas é que o arquivo que determine a rota possua o mesmo nome que a rota terá no aplicativo.
A primeira página ou a página inicial de qualquer rota é recomendado que seja com o arquivo index.tsx, esse é o padrão.
Nas outras rotas cria-se um arquivo com o nome da rota.

- A navegação Mobile é um pouco diferente na navegação Web, na mobile temos Stacks, Modals e Tabs, que são os
componentes que compõem a navegação.

- Haptics é um recurso que o web não possui, ele é a pequena vibração que o celular faz de acordo com algumas ações
ou interações do usuário, ainda que ele seja um recurso útil e interessante, é necessário usar de forma ponderada para
que não se torne excessivo e transforme a UX em algo ruim.

- Notificações é um outro recurso do React Native que não existe na Web, ele é usado para enviar mensagens ou alertas
para o usuário. Existem dois tipos, a remota, que é enviada por um servidor e a local, que é enviada pelo próprio
aplicativo. As notificações são usadas para informar o usuário sobre eventos importantes, como novas mensagens,
atualizações de status, lembretes e outras informações relevantes.

- O ato de requerer permissão do usuário para obter permissão para algum evento ou utilitário do celular, só pode ser
feito uma única vez por aplicativo, ou seja, se o usuário já deu permissão para o aplicativo acessar a câmera,
não será necessário solicitar novamente essa permissão, a não ser que o usuário revogue essa permissão nas configurações
do dispositivo.Caso não seja concedida a permissão a única maneira de alterar é com o usuário indo até as configurações
do dispositivo e alterando manualmente.




- Tudo dentro da pasta App, ou é uma screen ou é um arquivo de layout. Um arquivo de layout é um arquivo geralmente
identificado com o _ no início do nome. O arquivo de layout diz, especificamente, como o será exibido as telas daquela
pasta.

- Todas as screens e layouts devem ter um export default, pois é assim que o React Native identifica qual é a tela ou
layout que deve ser exibido.

- O Hook useRouter é usado para navegar entre as telas do aplicativo. Ele permite que você navegue para uma nova tela,
passando parâmetros e opções de navegação. O useRouter é uma função que retorna um objeto com métodos para navegar entre
as telas, como push, replace e back. O useRouter é usado em conjunto com o componente Router, que é responsável por
definir as rotas do aplicativo. O useRouter é uma forma de acessar a navegação do aplicativo de forma mais fácil e
rápida, sem precisar passar props de navegação entre os componentes. Ele é uma alternativa ao uso do componente
NavigationContainer, que é usado para definir as rotas do aplicativo.

- O uso do componente Link é uma forma de navegar entre as telas do aplicativo, sem precisar usar o useRouter.

- Outra forma de navegação são os botões no cabeçalho, uma vez que eles são definidos por default, com o formato
 dependendo de cada sistema operacional.

- Fazer o render de um conteudo como modal significa renderizar o componente no topo do outro conteúdo.

- Assets são importados através de propriedades dentro do componente.

- Não há um Form Component em React Nativo, assim, todos os inputs devem ser gerenciados manualmente.

- Como existe um "Done" button no teclado, não é comum criar botão de submit em formulários em React Native.

- Diferentemente da Web, não existe um comportamento de Scroll nativo em React Native, caso seja necessário utilizar o
scroll, deve-se utilizar o componente ScrollView.

- Caso seja necessário adicionar algum UI estilo, como paddings, margins, etc, em um elemento Scrollavel, deve-se
adicioná-lo ao ContentContainer ao invés do Container.

- Caso você utilize na tela um array com os itens mapeados, o ideal é não utilizar o ScrollView e sim o FlatList, que é
uma lista otimizada para exibir grandes quantidades de dados. O FlatList é mais eficiente do que o ScrollView, pois
ele renderiza apenas os itens visíveis na tela, enquanto o ScrollView renderiza todos os itens de uma vez.

- Se o dado manipulado tiver um Id ou uma Key, o Flatlist por padrão já faz utilização desse dado, assim, não é
necessário declarar keys para o uso de FlatList. Caso não tenha, a propriedade necessária é o KeyExtractor, que é uma
função que recebe o item e retorna uma string única para cada item da lista.

- O grande diferencial do FlatList, é que a partir da propriedade RenderItem, ele já renderiza os itens de forma
otimizada, ou seja, ele renderiza apenas os itens visíveis na tela, enquanto o ScrollView renderiza todos os itens de
uma vez. Isso significa que o FlatList é mais eficiente em termos de desempenho, especialmente quando se trata de listas
grandes. Além disso, o FlatList também oferece recursos adicionais, como a capacidade de rolar para um item específico,
atualizar a lista de forma eficiente e renderizar itens de forma assíncrona.

- A utilização da propriedade CSS flex é extremamente útil, com flex: 1 significando que o elemento irá ocupar o espaço
disponível, enquanto flex: 0 significa que o elemento não irá ocupar nenhum espaço adicional. Isso é
particularmente útil quando se trata de layouts responsivos, onde os elementos precisam se ajustar ao tamanho da tela.

- AsyncStorage é uma biblioteca que permite armazenar dados de forma assíncrona no dispositivo do usuário. É usado para
armazenar dados simples, como preferências do usuário, configurações do aplicativo e outros dados que não precisam ser
persistidos em um banco de dados. O AsyncStorage é uma forma simples e rápida de armazenar dados no dispositivo do
usuário, mas não é recomendado para armazenar grandes quantidades de dados ou dados complexos. Para isso, é melhor usar
um banco de dados, como o SQLite ou o Realm.

- O pacote AsyncStorage foi projetado nativamente para fazer parte do Core do React Native, porém, foi colocado como
pacote externo justamente para que possa sofrer mais atializações e melhorias por parte da comunidade, do que seria
se fizesse parte do Core. Assim, ela faz parte do core, mas é um pacote externo.

- O useEffect é um Hook que permite executar efeitos colaterais em componentes funcionais. Ele é usado para executar
código que não está diretamente relacionado à renderização do componente, como chamadas de API, manipulação de eventos,
e outras operações assíncronas. O useEffect é executado após a renderização do componente, e pode ser configurado para
ser executado apenas uma vez, quando o componente é montado, ou sempre que uma dependência específica é alterada.

